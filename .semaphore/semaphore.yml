# Use the latest stable version of Semaphore 2.0 YML syntax:
version: v1.0

# Name of your pipeline. In this example we connect two pipelines with
# a promotion, so it helps to differentiate what's the job of each.
name: Elixir Phoenix example CI pipeline on Semaphore

# An agent defines the environment in which your code runs.
# It is a combination of one of available machine types and operating
# system images. See:
# https://docs.semaphoreci.com/article/20-machine-types
# https://docs.semaphoreci.com/article/32-ubuntu-1804-image
agent:
  machine:
    type: e1-standard-2
    os_image: ubuntu1804

# Global job config can be used to specify set of commands that will run for every job in a pipeline.
global_job_config:
  prologue:
    commands:
      # Specify elixir version
      - sem-version elixir 1.11
      # Checkout code from Git repository. This step is mandatory if the
      # job is to work with your code.
      - checkout
      - bin/setup_ci_elixir

      # Restore dependencies from cache, command won't fail if it's
      # missing. More on caching:
      # - https://docs.semaphoreci.com/article/149-caching
      # - https://docs.semaphoreci.com/article/87-language-elixir
      - cache restore

# Blocks make up the structure of a pipeline and are executed sequentially.
# Each block has a task that defines one or many parallel jobs. Jobs define
# the commands to execute.
# See https://docs.semaphoreci.com/article/62-concepts
blocks:
  - name: Set up
    task:
      jobs:
      - name: compile and build plts
        commands:
          # Cache the PLT generated from the dialyzer to speed up pipeline process.
          # As suggested here - https://github.com/jeremyjh/dialyxir#continuous-integration
          # This will need to be rebuilt if elixir or erlang version changes.
          - cache restore dialyzer-plt

          - mix deps.get
          - mix do compile, dialyzer --plt
          - MIX_ENV=test mix compile

          # Store deps after compilation, otherwise rebar3 deps (that is, most
          # Erlang deps) won't be cached:
          - cache store
          - cache store dialyzer-plt priv/plts/

  - name: Analyze code
    task:
      # Commands in prologue run at the beginning of each parallel job.
      # https://docs.semaphoreci.com/article/50-pipeline-yaml
      prologue:
        commands:
        - cache restore dialyzer-plt
      # This block contains 3 parallel jobs:
      jobs:
      - name: credo
        commands:
        - mix credo -a

      - name: dialyzer
        commands:
        - mix dialyzer --no-compile

      - name: formatter
        commands:
        - mix format --check-formatted

  - name: Run tests
    task:
      jobs:
      - name: ex_unit
        # Define an environment variable
        # See https://docs.semaphoreci.com/article/66-environment-variables-and-secrets
        env_vars:
        - name: DATABASE_URL
          value: "ecto://postgres:@0.0.0.0:5432/sema_test"
        commands:
        # Start Postgres database service
        # https://docs.semaphoreci.com/article/54-toolbox-reference#sem-service
        - sem-service start postgres
        - mix test
      epilogue:
        always:
          commands:
            # Publish test results
            - test-results publish /tmp/junit.xml

# After pipeline is finished, generate aggregated test report
# See https://docs.semaphoreci.com/essentials/test-summary/#step-3-collect-and-merge-all-xml-results-in-a-pipeline
after_pipeline:
  task:
    jobs:
      - name: Publish Results
        commands:
          - test-results gen-pipeline-report
